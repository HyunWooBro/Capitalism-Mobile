

-	싱글턴 vs. 정적클래스 (유틸리티 클래스의 개념)

	=> 싱글턴에 정적메서드 포함 하는 경우는?

-	! 사용 여부

	=> 사용해도 나쁘지 않을 것 같다. 익숙해지면 될 것 같다.

-	삼항조건연사자 사용 여부

	=> 적절하게 사용하면 좋을 것 같다.

-	foreach 사용 여우

	=> ArrayList의 경우는 하드코딩이 조금 더 빠르지만, 속도가 크게 중요하지 않는 경우는 가독성을 위해
	사용하는 것도 좋을 것 같다. 그렇지만 일관성도 함께 생각해야 한다.
	=> 내부적으로 Iterator을 할당하므로 안드로이드에서는 피하는게 좋다.

-	메서드 순서

	=> 중요도, 연관성(get끼리 set끼리 vs. get set pair), 과정, 추가내용(인터페이스, 내부클래스)

-	메서드 인자를 다음 줄에 쓸 때 탭 몇개?

-	메서드 체인을 사용할 것인지?

	=> 연속해서 나오는 메서드 수의 비중이 높은 경우에는 사용해도 될 것 같다.

-	좌표, 너비, 높이 등을 int로 할 것인지, float로 할 것인지?

	=> 상황에 따라 다르다. OpenGL은 기본적으로 float을 원한다.

-	패러미터로 Point나 Rect같은 객체를 사용할 것인지 아니면 x, y, width ,height와 같이 개별적으로
	사용할 것인지?
	
	=> 패러미터에 이런 객체가 있다면 객체 생성을 강요하는 결과를 낳을 수 있다. 따라서 패러미터
	에는 최대한 이런 객체의 요구를 줄이는 것이 좋다. 단, 객체에 리턴값을 넣어서 되돌려 주는 경우에는 
	사용할 수 있다.

-	블록({ })에서 '{'의 시작 위치 

	=> 처음에는 다음 줄에 내려서 사용하는 것을 선호했지만 지금은 같은 줄에서 시작하는게 더 
	좋은 것 같다.

-	다음 줄이 하나일 경우 블록({})의 사용 여부

	=> 다음 줄이 하나일 경우에 짧으면 한 준에 같이 쓰고 길면 다음 줄에 쓰는데, 기본적으로 블록은 
	사용하지 않는다. 단, if문이 else문과 같이 쓰일 때 if와 else를 연관시켜 주기 위해 if문에 쓸 수는 있다.

-	interface vs. abstract (특히, 메서드에서 사용되는 변수가 명확할 때)

	=> 스스로 물어볼 질문
	1) class 상속은 무조건 1개 밖에 안된다. 즉, 다른 클래스를 상속할 경우가 전혀 없는가?
	2) interface에는 private 변수를 넣을 수 없는데 메서드와 관계된 변수의 비중이 얼마나 큰가?
	3) interface는 무조건 public 메서드만 넣을 수 있다. interface는 기본적으로 API를 사용하는 클라이언트에게 
	공개되는 소스이기 때문이다. interface에는 private 메서드를 넣을 수 없는데 이것의 비중이 얼마나 큰가?
	4) abstract는 메서드의 기초적인 명령를 첨부할 수 있다. 이것의 비중이 얼마나 큰가?
	(여기서 비중이란 이것을 구현&상속하는 클래스 내의 양뿐만 아니라 클래스 개수까지. 비중에는 절대적 비중과
	상대적 비중을 모두 고려해야 한다.)

-	abstract를 언제 사용할 것인가?

	=> class의 모든 메서드가 최소한 비어있는 body를 가지고 있어서 설사 abstract를 굳이 추가하지 않아도 되더라도 
	메서드를 반드시 재정의해야 제대로 작동할 수 있다는 것을 보여주기 위해 abstract를 첨가하는 것도 좋은 것 같다. 
	또한, private이나 package 가시성을 가진 생성자만을 가지면서 같은 패키지나 nested 클래스에서 확장하는 경우에도 
	abstract을 추가해 주는 것이 좋겠다. 설사 모든 메서드를 기본적으로 구현하고 있다고 해도, 그 자체로 인스턴스를 
	만들지 못하면서 확장하는 클래스에 대한 베이스가 되기 때문이다. 즉, 어차피 확장을 해야만 사용할 수 있는 것이므로 
	추상적으로 볼 수 있다.

-	adapter은 abstract를 붙여야 하나?

	=> 붙이는 것이 좋겠다. 어차피 메서드를 재정의 하지 않으면 의미 없는 것이기 때문이다. 즉, 반드시 어떤 
	메서드든 재정의해야 한다는 것을 보이기 위해 abstract를 붙이는 것이 좋겠다.

-	adapter을 따로 만들 필요가 있나?

	=> listener가 interface라면 class보다 확장 가능성이 높으므로 따로 만들어 줄 수 있다. 그러나 listener가 
	class라면 굳이 adapter을 따로 만들기보다 비어있는 body를 추가해 주는 것이 좋을 수 있다.
	=>	listener은 보통 interface로 정의되고 안드로이드에서는 interface를 구현하여 빈 바디를 갖는 adapter를 
	만들기도 하는데 나는 adapter라는 개념을 사용하지 않고 listener로 통일하겠다. 즉, listener는 interface도 
	될 수 있고 abstract class도 될 수 있다. 전자는 모든 메서드를 강제할 필요가 있을 경우에, 후자는 일부 
	또는 강제할 메서드가 없을 때 사용한다.

-	defencive copy를 해야하나?

	=> 장단점이 있다. 상황에 따라. Immutable 클래스로 확장하여 사용하는 것도 하나의 방법이다.

-	정적상수 이름은 모두 대문자?

	=> 처음에 정수와 문자열만 했었지만, 안드로이드는 객체까지도 대문자로 하는 것을 발견한 이후로 나도 
	그렇게 하겠다. 객체는 소문자로 하는것에 익숙했지만 이것도 적응하면 편하질 것이다.

-	멤버 변수 앞에 s와 m를 붙일 것인가?

	=> 장단점이 있다. 일단 붙이는 것으로 하자. 단, 변수를 public을 통해 노출하는 경우(e.g. Point의 x, y)는 
	m을 붙이지 말고 static을 경우에는 계속 s를 붙이자.

-	메서드의 precondition을 검사하는 부분은 메서드의 밖이 좋을까? 아니면, 메서드의 선두가 좋을까?

	=> 장단점이 있다. 전자는 좀 더 최적화가 되고 후자는 관련된 내용을 한 곳에 둘 수 있다는 장점이 있다. 
	하나 더 생각할 것이 있다면, 메서드를 재정의하는 경우가 많다면 메서드의 밖에 두는 것이 편의성 측면과 
	확장성 측면(기존 코드를 재사용 하면서 precondition과 실제 본문 사이에 추가적인 코드를 삽입 가능)에서 
	더 좋을 수 있다는 것이다.

-	클래스를 언제 다른 클래스 내부에 정의하는가?

	=> 클래스의 정의가 다른 클래스 내부에 있을 때, private이라면 그 클래스를 포함하고 있는 클래스에서만 
	사용하겠다는 의미이고 public이라면 외부에 공개는 하되 상당부분 그 클래스를 포함하는 클래스에 종속되어 
	있다는 의미이다.
	
-	유저가 잘못 처리한 작업을 시스템은 어떻게 대처해야 하는가?

	=> 가능한 대처방법은 다음이 있다.
	1) 주석으로 경고 (유저가 의도했든 의도하지 않았든 정의되지 않은 결과에 대해 유저의 책임으로 여긴다.)
	2) 그러한 상황이 발생하면 예외처리를 하는 등의 적극적 경고
	3) 애초부터 그런 상황이 나오지 않도록 시스템을 설계 (이 경우에는 억제 방법이 타당성을 갖추어야 한다.)
	ex) 메서드의 매개변수를 clamp하여 적절한 범위의 값으로 수정
	
-	get메서드의 경우 객체를 리턴할 경우 수정할 수도 있는데 이와 같은 상황을 해결할 수 있는 방법은?

	=> 가능한 해법
	1) 주석으로 경고 (수정된 내용을 처리할 수 있는 추가 메서드 호출을 동반하도록 요구할 수도 있다.)
	2) immutable 객체 반환
	
-	else if의 경우 else 때문에 if문과 정렬이 깔끔하지 않다. 그래서 else를 제외해도 되는가?

	=> 그렇다고 해도 제외하면 안될 것 같다. 다음 2가지 이유때문이다.
	1) 최적화의 측면에서 모든 if문이 무조건 실행된다.
	2) 코드를 보는 사람에게 if문이 모두 독립적으로 필요하다는 인상을 준다.
	